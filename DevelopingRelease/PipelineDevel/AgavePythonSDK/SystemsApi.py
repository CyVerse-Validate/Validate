#!/usr/bin/env python
"""
WordAPI.py
Copyright 2012 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from models import *


class SystemsApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    def list(self, defaultOnly, publicOnly, **kwargs):
        """Show all systems available to the user.

        Args:
            type, String: The type of system to return (optional)
            defaultOnly, bool: Should only default systems be returned (optional)
            publicOnly, bool: Should only publicly available systems be returned (optional)
            
        Returns: MultipleSystemResponse
        """

        allParams = ['type', 'defaultOnly', 'publicOnly']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method list" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('type' in params):
            queryParams['type'] = self.apiClient.toPathValue(params['type'])
        if ('defaultOnly' in params):
            replacement = str(self.apiClient.toPathValue(params['defaultOnly']))
            resourcePath = resourcePath.replace('{' + 'defaultOnly' + '}',
                                                replacement)
        if ('publicOnly' in params):
            replacement = str(self.apiClient.toPathValue(params['publicOnly']))
            resourcePath = resourcePath.replace('{' + 'publicOnly' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MultipleSystemResponse')
        return responseObject
        
        
    def add(self, body, **kwargs):
        """Find information about an individual system.

        Args:
            body, System: The description of the system to add or update. This can be either a file upload or json posted to the request body. (required)
            
        Returns: SingleSystemResponse
        """

        allParams = ['body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method add" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SingleSystemResponse')
        return responseObject
        
        
    def get(self, systemId, **kwargs):
        """Find information about an individual system.

        Args:
            systemId, String: The unique id of the system (required)
            
        Returns: SingleSystemResponse
        """

        allParams = ['systemId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method get" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/{systemId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('systemId' in params):
            replacement = str(self.apiClient.toPathValue(params['systemId']))
            resourcePath = resourcePath.replace('{' + 'systemId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SingleSystemResponse')
        return responseObject
        
        
    def update(self, systemId, body, **kwargs):
        """Find information about an individual system.

        Args:
            systemId, String: The unique id of the system (required)
            body, System: The description of the system to update. This can be either a file upload or json posted to the request body. (required)
            
        Returns: SingleSystemResponse
        """

        allParams = ['systemId', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method update" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/{systemId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('systemId' in params):
            replacement = str(self.apiClient.toPathValue(params['systemId']))
            resourcePath = resourcePath.replace('{' + 'systemId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SingleSystemResponse')
        return responseObject
        
        
    def manage(self, systemId, action, **kwargs):
        """Perform a management action on the system.

        Args:
            systemId, String: The unique id of the system (required)
            action, String: The action to take on this system (required)
            id, String: The new system id of the cloned system (optional)
            
        Returns: EmptySystemResponse
        """

        allParams = ['systemId', 'action', 'id']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method manage" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/{systemId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}

        if ('systemId' in params):
            replacement = str(self.apiClient.toPathValue(params['systemId']))
            resourcePath = resourcePath.replace('{' + 'systemId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptySystemResponse')
        return responseObject
        
        
    def delete(self, systemId, **kwargs):
        """Delete a system.

        Args:
            systemId, String: The unique id of the system (required)
            
        Returns: EmptySystemResponse
        """

        allParams = ['systemId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method delete" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/{systemId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('systemId' in params):
            replacement = str(self.apiClient.toPathValue(params['systemId']))
            resourcePath = resourcePath.replace('{' + 'systemId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptySystemResponse')
        return responseObject
        
        
    def listRoles(self, systemId, **kwargs):
        """Get a list of all users and their roles on this system.

        Args:
            systemId, str: The id of the system. (required)
            
        Returns: MultipleSystemRoleResponse
        """

        allParams = ['systemId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listRoles" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/{systemId}/roles'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('systemId' in params):
            replacement = str(self.apiClient.toPathValue(params['systemId']))
            resourcePath = resourcePath.replace('{' + 'systemId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MultipleSystemRoleResponse')
        return responseObject
        
        
    def updateRole(self, systemId, username, role, **kwargs):
        """Add or update a user's role on a system.

        Args:
            systemId, str: The id of the system. (required)
            username, str: The username of the api user associated with the role (required)
            role, str: The role to set (required)
            
        Returns: EmptySystemResponse
        """

        allParams = ['systemId', 'username', 'role']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateRole" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/{systemId}/roles'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('systemId' in params):
            replacement = str(self.apiClient.toPathValue(params['systemId']))
            resourcePath = resourcePath.replace('{' + 'systemId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptySystemResponse')
        return responseObject
        
        
    def deleteRoles(self, systemId, **kwargs):
        """Deletes all roles on a system.

        Args:
            systemId, str: The id of the system. (required)
            
        Returns: EmptySystemResponse
        """

        allParams = ['systemId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteRoles" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/{systemId}/roles'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('systemId' in params):
            replacement = str(self.apiClient.toPathValue(params['systemId']))
            resourcePath = resourcePath.replace('{' + 'systemId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptySystemResponse')
        return responseObject
        
        
    def listRolesForUser(self, systemId, username, **kwargs):
        """Get a specific user's roles on this system.

        Args:
            systemId, str: The id of the system. (required)
            username, str: The username of the user about whose role you are inquiring. (required)
            
        Returns: MultipleSystemRoleResponse
        """

        allParams = ['systemId', 'username']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listRolesForUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/{systemId}/roles/{username}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('systemId' in params):
            replacement = str(self.apiClient.toPathValue(params['systemId']))
            resourcePath = resourcePath.replace('{' + 'systemId' + '}',
                                                replacement)
        if ('username' in params):
            replacement = str(self.apiClient.toPathValue(params['username']))
            resourcePath = resourcePath.replace('{' + 'username' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MultipleSystemRoleResponse')
        return responseObject
        
        
    def updateRoleForUser(self, systemId, username, role, **kwargs):
        """Add or update a user's role on a system.

        Args:
            systemId, str: The id of the system. (required)
            username, str: The username of the api user associated with the role (required)
            role, str: The role to set (required)
            
        Returns: EmptySystemResponse
        """

        allParams = ['systemId', 'username', 'role']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateRoleForUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/{systemId}/roles/{username}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('systemId' in params):
            replacement = str(self.apiClient.toPathValue(params['systemId']))
            resourcePath = resourcePath.replace('{' + 'systemId' + '}',
                                                replacement)
        if ('username' in params):
            replacement = str(self.apiClient.toPathValue(params['username']))
            resourcePath = resourcePath.replace('{' + 'username' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptySystemResponse')
        return responseObject
        
        
    def deleteRoleForUser(self, systemId, username, **kwargs):
        """Deletes all roles on a system.

        Args:
            systemId, str: The id of the system. (required)
            username, str: The username of the api user associated with the role (required)
            
        Returns: EmptySystemResponse
        """

        allParams = ['systemId', 'username']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteRoleForUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/{systemId}/roles/{username}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('systemId' in params):
            replacement = str(self.apiClient.toPathValue(params['systemId']))
            resourcePath = resourcePath.replace('{' + 'systemId' + '}',
                                                replacement)
        if ('username' in params):
            replacement = str(self.apiClient.toPathValue(params['username']))
            resourcePath = resourcePath.replace('{' + 'username' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptySystemResponse')
        return responseObject
        
        
    def listCredentials(self, systemId, **kwargs):
        """Get a list of all internal users and their credentials on this system.

        Args:
            systemId, str: The id of the system. (required)
            
        Returns: SystemCredentialsResponse
        """

        allParams = ['systemId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listCredentials" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/{systemId}/credentials'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('systemId' in params):
            replacement = str(self.apiClient.toPathValue(params['systemId']))
            resourcePath = resourcePath.replace('{' + 'systemId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SystemCredentialsResponse')
        return responseObject
        
        
    def updateCredentials(self, systemId, body, **kwargs):
        """Add or update a user's credential on a system. This applies both to data and, if applicable, login credenitals.

        Args:
            systemId, str: The id of the system. (required)
            body, UserCredential: The description of the internal user credential to add or update. This can be either a file upload or json posted to the request body. (required)
            
        Returns: EmptySystemResponse
        """

        allParams = ['systemId', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateCredentials" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/{systemId}/credentials'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('systemId' in params):
            replacement = str(self.apiClient.toPathValue(params['systemId']))
            resourcePath = resourcePath.replace('{' + 'systemId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptySystemResponse')
        return responseObject
        
        
    def deleteCredentials(self, systemId, **kwargs):
        """Deletes all credentials registered to a system.

        Args:
            systemId, str: The id of the system. (required)
            
        Returns: EmptySystemResponse
        """

        allParams = ['systemId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteCredentials" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/{systemId}/credentials'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('systemId' in params):
            replacement = str(self.apiClient.toPathValue(params['systemId']))
            resourcePath = resourcePath.replace('{' + 'systemId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptySystemResponse')
        return responseObject
        
        
    def listCredentialsForInternalUser(self, systemId, internalUsername, **kwargs):
        """Get a list of all internal users and their credentials on this system.

        Args:
            systemId, str: The id of the system. (required)
            internalUsername, str: The username of a internal user on this system. (required)
            
        Returns: SystemCredentialsResponse
        """

        allParams = ['systemId', 'internalUsername']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listCredentialsForInternalUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/{systemId}/credentials/{internalUsername}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('systemId' in params):
            replacement = str(self.apiClient.toPathValue(params['systemId']))
            resourcePath = resourcePath.replace('{' + 'systemId' + '}',
                                                replacement)
        if ('internalUsername' in params):
            replacement = str(self.apiClient.toPathValue(params['internalUsername']))
            resourcePath = resourcePath.replace('{' + 'internalUsername' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SystemCredentialsResponse')
        return responseObject
        
        
    def updateCredentialsForInternalUser(self, systemId, internalUsername, body, **kwargs):
        """Add or update a user's credentials on a system.

        Args:
            systemId, str: The id of the system. (required)
            internalUsername, str: The username of a internal user on this system. (required)
            body, UserCredential: The description of the internal user credential to add or update. This can be either a file upload or json posted to the request body. (required)
            
        Returns: EmptySystemResponse
        """

        allParams = ['systemId', 'internalUsername', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateCredentialsForInternalUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/{systemId}/credentials/{internalUsername}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('systemId' in params):
            replacement = str(self.apiClient.toPathValue(params['systemId']))
            resourcePath = resourcePath.replace('{' + 'systemId' + '}',
                                                replacement)
        if ('internalUsername' in params):
            replacement = str(self.apiClient.toPathValue(params['internalUsername']))
            resourcePath = resourcePath.replace('{' + 'internalUsername' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptySystemResponse')
        return responseObject
        
        
    def deleteCredentialsForInternalUser(self, systemId, internalUsername, **kwargs):
        """Deletes all credentials registered to a system.

        Args:
            systemId, str: The id of the system. (required)
            internalUsername, str: The username of a internal user on this system. (required)
            
        Returns: EmptySystemResponse
        """

        allParams = ['systemId', 'internalUsername']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteCredentialsForInternalUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/{systemId}/credentials/{internalUsername}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('systemId' in params):
            replacement = str(self.apiClient.toPathValue(params['systemId']))
            resourcePath = resourcePath.replace('{' + 'systemId' + '}',
                                                replacement)
        if ('internalUsername' in params):
            replacement = str(self.apiClient.toPathValue(params['internalUsername']))
            resourcePath = resourcePath.replace('{' + 'internalUsername' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptySystemResponse')
        return responseObject
        
        
    def listCredentialsForInternalUserByType(self, systemId, internalUsername, credentialType, **kwargs):
        """Get the internal user credential of the given type on the system.

        Args:
            systemId, str: The id of the system. (required)
            internalUsername, str: The username of a internal user on this system. (required)
            credentialType, str: The configuration type to which to apply this credential. (required)
            
        Returns: SystemCredentialsResponse
        """

        allParams = ['systemId', 'internalUsername', 'credentialType']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listCredentialsForInternalUserByType" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/{systemId}/credentials/{internalUsername}/{credentialType}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('systemId' in params):
            replacement = str(self.apiClient.toPathValue(params['systemId']))
            resourcePath = resourcePath.replace('{' + 'systemId' + '}',
                                                replacement)
        if ('internalUsername' in params):
            replacement = str(self.apiClient.toPathValue(params['internalUsername']))
            resourcePath = resourcePath.replace('{' + 'internalUsername' + '}',
                                                replacement)
        if ('credentialType' in params):
            replacement = str(self.apiClient.toPathValue(params['credentialType']))
            resourcePath = resourcePath.replace('{' + 'credentialType' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SystemCredentialsResponse')
        return responseObject
        
        
    def updateCredentialsForInternalUserByType(self, systemId, internalUsername, credentialType, body, **kwargs):
        """Add or update a credential of the given type on a system.

        Args:
            systemId, str: The id of the system. (required)
            internalUsername, str: The username of a internal user on this system. (required)
            credentialType, str: The configuration type to which to apply this credential. (required)
            body, UserCredential: The description of the internal user credential to add or update. This can be either a file upload or json posted to the request body. (required)
            
        Returns: EmptySystemResponse
        """

        allParams = ['systemId', 'internalUsername', 'credentialType', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateCredentialsForInternalUserByType" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/{systemId}/credentials/{internalUsername}/{credentialType}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('systemId' in params):
            replacement = str(self.apiClient.toPathValue(params['systemId']))
            resourcePath = resourcePath.replace('{' + 'systemId' + '}',
                                                replacement)
        if ('internalUsername' in params):
            replacement = str(self.apiClient.toPathValue(params['internalUsername']))
            resourcePath = resourcePath.replace('{' + 'internalUsername' + '}',
                                                replacement)
        if ('credentialType' in params):
            replacement = str(self.apiClient.toPathValue(params['credentialType']))
            resourcePath = resourcePath.replace('{' + 'credentialType' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptySystemResponse')
        return responseObject
        
        
    def deleteCredentialsForInternalUserByType(self, systemId, internalUsername, credentialType, **kwargs):
        """Deletes the internal user credentials for the given credential type on a system.

        Args:
            systemId, str: The id of the system. (required)
            internalUsername, str: The username of a internal user on this system. (required)
            credentialType, str: The configuration type to which to apply this credential. (required)
            
        Returns: EmptySystemResponse
        """

        allParams = ['systemId', 'internalUsername', 'credentialType']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteCredentialsForInternalUserByType" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/systems/2.0/{systemId}/credentials/{internalUsername}/{credentialType}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('systemId' in params):
            replacement = str(self.apiClient.toPathValue(params['systemId']))
            resourcePath = resourcePath.replace('{' + 'systemId' + '}',
                                                replacement)
        if ('internalUsername' in params):
            replacement = str(self.apiClient.toPathValue(params['internalUsername']))
            resourcePath = resourcePath.replace('{' + 'internalUsername' + '}',
                                                replacement)
        if ('credentialType' in params):
            replacement = str(self.apiClient.toPathValue(params['credentialType']))
            resourcePath = resourcePath.replace('{' + 'credentialType' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptySystemResponse')
        return responseObject
        
        
    


