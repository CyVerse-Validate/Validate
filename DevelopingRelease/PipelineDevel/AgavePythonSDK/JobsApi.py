#!/usr/bin/env python
"""
WordAPI.py
Copyright 2012 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from models import *


class JobsApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    def list(self, **kwargs):
        """Get a list of jobs the authenticated user had submitted.

        Args:
            
        Returns: MultipleJobResponse
        """

        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method list" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/jobs/2.0/'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MultipleJobResponse')
        return responseObject
        
        
    def submit(self, body, **kwargs):
        """Submit a new job request.

        Args:
            body, Job: The description of the job to submit. This can be either a file upload or json posted to the request body. (required)
            
        Returns: SingleJobResponse
        """

        allParams = ['body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method submit" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/jobs/2.0/'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SingleJobResponse')
        return responseObject
        
        
    def get(self, jobId, **kwargs):
        """Get details of the job with the specific job id.

        Args:
            jobId, int: The id of the job. (required)
            
        Returns: SingleJobResponse
        """

        allParams = ['jobId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method get" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/jobs/2.0/{jobId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('jobId' in params):
            replacement = str(self.apiClient.toPathValue(params['jobId']))
            resourcePath = resourcePath.replace('{' + 'jobId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SingleJobResponse')
        return responseObject
        
        
    def manage(self, jobId, action, **kwargs):
        """Perform an action on application.

        Args:
            jobId, str: The id of the job. (required)
            action, str: Action to perform on this job. (required)
            
        Returns: SingleJobResponse
        """

        allParams = ['jobId', 'action']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method manage" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/jobs/2.0/{jobId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('jobId' in params):
            replacement = str(self.apiClient.toPathValue(params['jobId']))
            resourcePath = resourcePath.replace('{' + 'jobId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SingleJobResponse')
        return responseObject
        
        
    def delete(self, jobId, **kwargs):
        """Deletes a job from the user's history.

        Args:
            jobId, str: The id of the job. (required)
            
        Returns: EmptyJobResponse
        """

        allParams = ['jobId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method delete" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/jobs/2.0/{jobId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('jobId' in params):
            replacement = str(self.apiClient.toPathValue(params['jobId']))
            resourcePath = resourcePath.replace('{' + 'jobId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptyJobResponse')
        return responseObject
        
        
    def getHistory(self, jobId, **kwargs):
        """Get the history of this job.

        Args:
            jobId, str: The id of the job. (required)
            
        Returns: JobHistoryResponse
        """

        allParams = ['jobId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getHistory" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/jobs/2.0/{jobId}/history'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('jobId' in params):
            replacement = str(self.apiClient.toPathValue(params['jobId']))
            resourcePath = resourcePath.replace('{' + 'jobId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'JobHistoryResponse')
        return responseObject
        
        
    def listPermissions(self, jobId, **kwargs):
        """Get the permission ACL for this job.

        Args:
            jobId, str: The id of the job. (required)
            
        Returns: JobPermissionResponse
        """

        allParams = ['jobId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listPermissions" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/jobs/2.0/{jobId}/pems'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('jobId' in params):
            replacement = str(self.apiClient.toPathValue(params['jobId']))
            resourcePath = resourcePath.replace('{' + 'jobId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'JobPermissionResponse')
        return responseObject
        
        
    def updatePermissions(self, jobId, username, permission, **kwargs):
        """Add or update a user's permission for an application.

        Args:
            jobId, str: The id of the job. (required)
            username, str: The username of the api user associated with the permission (required)
            permission, str: The permission to set (required)
            
        Returns: EmptyJobResponse
        """

        allParams = ['jobId', 'username', 'permission']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updatePermissions" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/jobs/2.0/{jobId}/pems'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('jobId' in params):
            replacement = str(self.apiClient.toPathValue(params['jobId']))
            resourcePath = resourcePath.replace('{' + 'jobId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptyJobResponse')
        return responseObject
        
        
    def deletePermissions(self, jobId, **kwargs):
        """Deletes all permissions on an job.

        Args:
            jobId, str: The id of the job. (required)
            
        Returns: EmptyJobResponse
        """

        allParams = ['jobId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deletePermissions" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/jobs/2.0/{jobId}/pems'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('jobId' in params):
            replacement = str(self.apiClient.toPathValue(params['jobId']))
            resourcePath = resourcePath.replace('{' + 'jobId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptyJobResponse')
        return responseObject
        
        
    def listPermissionsForUser(self, jobId, username, **kwargs):
        """Get a specific user's permissions for a job.

        Args:
            jobId, str: The id of the job. (required)
            username, str: The username of the api user associated with the permission. (required)
            
        Returns: JobPermissionResponse
        """

        allParams = ['jobId', 'username']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listPermissionsForUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/jobs/2.0/{jobId}/pems/{username}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('jobId' in params):
            replacement = str(self.apiClient.toPathValue(params['jobId']))
            resourcePath = resourcePath.replace('{' + 'jobId' + '}',
                                                replacement)
        if ('username' in params):
            replacement = str(self.apiClient.toPathValue(params['username']))
            resourcePath = resourcePath.replace('{' + 'username' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'JobPermissionResponse')
        return responseObject
        
        
    def updatePermissionsForUser(self, jobId, username, permission, **kwargs):
        """Add or update a user's permission for an job.

        Args:
            jobId, str: The id of the job. (required)
            username, str: The username of the api user associated with the permission (required)
            permission, str: The permission to set (required)
            
        Returns: EmptyJobResponse
        """

        allParams = ['jobId', 'username', 'permission']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updatePermissionsForUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/jobs/2.0/{jobId}/pems/{username}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('jobId' in params):
            replacement = str(self.apiClient.toPathValue(params['jobId']))
            resourcePath = resourcePath.replace('{' + 'jobId' + '}',
                                                replacement)
        if ('username' in params):
            replacement = str(self.apiClient.toPathValue(params['username']))
            resourcePath = resourcePath.replace('{' + 'username' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptyJobResponse')
        return responseObject
        
        
    def deletePermissionsForUser(self, uniqueName, username, **kwargs):
        """Deletes all permissions for the given user on an job.

        Args:
            uniqueName, str: The id of the application. The application id is made up of the name and version separated by a dash. (required)
            username, str: The username of the api user associated with the permission (required)
            
        Returns: EmptyApplicationResponse
        """

        allParams = ['uniqueName', 'username']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deletePermissionsForUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/jobs/2.0/{jobId}/pems/{username}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('uniqueName' in params):
            replacement = str(self.apiClient.toPathValue(params['uniqueName']))
            resourcePath = resourcePath.replace('{' + 'uniqueName' + '}',
                                                replacement)
        if ('username' in params):
            replacement = str(self.apiClient.toPathValue(params['username']))
            resourcePath = resourcePath.replace('{' + 'username' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptyApplicationResponse')
        return responseObject
        
        
    def getStatus(self, jobId, **kwargs):
        """Get the status of the job.

        Args:
            jobId, str: The id of the job. (required)
            
        Returns: JobStatusResponse
        """

        allParams = ['jobId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getStatus" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/jobs/2.0/{jobId}/status'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('jobId' in params):
            replacement = str(self.apiClient.toPathValue(params['jobId']))
            resourcePath = resourcePath.replace('{' + 'jobId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'JobStatusResponse')
        return responseObject
        
        
    def listOutputs(self, jobId, filePath, **kwargs):
        """List the output folder for a job.

        Args:
            jobId, str: The id of the job. (required)
            filePath, str: The path to an output file or folder relative to the job output directory. This resource will follow data around as it moves from the execution system to archival storage. (required)
            
        Returns: MultipleRemoteFileResponse
        """

        allParams = ['jobId', 'filePath']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listOutputs" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/jobs/2.0/{jobId}/ouputs/listings/{filePath}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('jobId' in params):
            replacement = str(self.apiClient.toPathValue(params['jobId']))
            resourcePath = resourcePath.replace('{' + 'jobId' + '}',
                                                replacement)
        if ('filePath' in params):
            replacement = str(self.apiClient.toPathValue(params['filePath']))
            resourcePath = resourcePath.replace('{' + 'filePath' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MultipleRemoteFileResponse')
        return responseObject
        
        
    def downloadOutput(self, jobId, filePath, **kwargs):
        """Download an output file from a specific job.

        Args:
            jobId, str: The id of the job. (required)
            filePath, str: The path to an output file relative to the job output directory.  (optional)
            
        Returns: JobOutputFileDownload
        """

        allParams = ['jobId', 'filePath']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method downloadOutput" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/jobs/2.0/{jobId}/ouputs/media/{filePath}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('jobId' in params):
            replacement = str(self.apiClient.toPathValue(params['jobId']))
            resourcePath = resourcePath.replace('{' + 'jobId' + '}',
                                                replacement)
        if ('filePath' in params):
            replacement = str(self.apiClient.toPathValue(params['filePath']))
            resourcePath = resourcePath.replace('{' + 'filePath' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'JobOutputFileDownload')
        return responseObject
        
        
    def search(self, attribute, value, **kwargs):
        """Find jobs matching the given attribute/value combination(s).

        Args:
            attribute, str: The attribute to query by. This can be any job field. (required)
            value, str: The value of the attribute to query for. (required)
            
        Returns: MultipleJobResponse
        """

        allParams = ['attribute', 'value']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method search" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/jobs/2.0/{attribute}/{value}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('attribute' in params):
            replacement = str(self.apiClient.toPathValue(params['attribute']))
            resourcePath = resourcePath.replace('{' + 'attribute' + '}',
                                                replacement)
        if ('value' in params):
            replacement = str(self.apiClient.toPathValue(params['value']))
            resourcePath = resourcePath.replace('{' + 'value' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MultipleJobResponse')
        return responseObject
        
        
    


