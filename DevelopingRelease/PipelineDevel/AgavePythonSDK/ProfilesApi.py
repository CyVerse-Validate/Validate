#!/usr/bin/env python
"""
WordAPI.py
Copyright 2012 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from models import *


class ProfilesApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    def get(self, **kwargs):
        """Find authenticated user profile

        Args:
            
        Returns: MultipleProfileResponse
        """

        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method get" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/profiles/2.0/'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MultipleProfileResponse')
        return responseObject
        
        
    def listByUsername(self, username, **kwargs):
        """Find api user profile by their api username

        Args:
            username, str: The username of a valid api user (required)
            
        Returns: MultipleProfileResponse
        """

        allParams = ['username']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listByUsername" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/profiles/2.0/{username}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('username' in params):
            replacement = str(self.apiClient.toPathValue(params['username']))
            resourcePath = resourcePath.replace('{' + 'username' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MultipleProfileResponse')
        return responseObject
        
        
    def search(self, term, value, **kwargs):
        """Search for authenticated user profiles by search terms

        Args:
            term, str: The profile attribute by which to search. (required)
            value, str: The search value. Partial matches will be returned. (required)
            
        Returns: MultipleProfileResponse
        """

        allParams = ['term', 'value']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method search" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/profiles/2.0/search/{term}/{value}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('term' in params):
            replacement = str(self.apiClient.toPathValue(params['term']))
            resourcePath = resourcePath.replace('{' + 'term' + '}',
                                                replacement)
        if ('value' in params):
            replacement = str(self.apiClient.toPathValue(params['value']))
            resourcePath = resourcePath.replace('{' + 'value' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MultipleProfileResponse')
        return responseObject
        
        
    def listInternalUsers(self, apiUsername, **kwargs):
        """List all internal users created by the authenticated user

        Args:
            apiUsername, str: The username of a valid api user (required)
            
        Returns: MultipleInternalUserResponse
        """

        allParams = ['apiUsername']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listInternalUsers" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/profiles/2.0/{apiUsername}/users'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('apiUsername' in params):
            replacement = str(self.apiClient.toPathValue(params['apiUsername']))
            resourcePath = resourcePath.replace('{' + 'apiUsername' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MultipleInternalUserResponse')
        return responseObject
        
        
    def deleteInternalUsers(self, apiUsername, **kwargs):
        """Delete all internal users created by the authenticated user.

        Args:
            apiUsername, str: The username of a valid api user (required)
            
        Returns: SingleInternalUserResponse
        """

        allParams = ['apiUsername']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteInternalUsers" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/profiles/2.0/{apiUsername}/users'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('apiUsername' in params):
            replacement = str(self.apiClient.toPathValue(params['apiUsername']))
            resourcePath = resourcePath.replace('{' + 'apiUsername' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SingleInternalUserResponse')
        return responseObject
        
        
    def addInternalUser(self, apiUsername, username, email, **kwargs):
        """Create or update an internal user.

        Args:
            apiUsername, str: The username of a valid api user (required)
            username, str: The internal user's username. This must be unique among all internal users created by the authenticated api user. (required)
            email, str: The internal user's email address. This must be unique among all internal users created by the authenticated api user. (required)
            firstName, str: The internal user's first name. (optional)
            lastName, str: The internal user's last name. (optional)
            position, str: The internal user's position at their institution. (optional)
            institution, str: The internal user's institution. (optional)
            phone, str: The internal user's phone number in ###-###-#### format. (optional)
            fax, str: The internal user's phone number in ###-###-#### format. (optional)
            researchArea, str: The internal user's first name. (optional)
            department, str: The internal user's first name. (optional)
            city, str: The internal user's first name. (optional)
            state, str: The internal user's state. (optional)
            country, str: The internal user's country. (optional)
            gender, str: The internal user's gender. (optional)
            
        Returns: SingleInternalUserResponse
        """

        allParams = ['apiUsername', 'username', 'email', 'firstName', 'lastName', 'position', 'institution', 'phone', 'fax', 'researchArea', 'department', 'city', 'state', 'country', 'gender']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method addInternalUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/profiles/2.0/{apiUsername}/users'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('apiUsername' in params):
            replacement = str(self.apiClient.toPathValue(params['apiUsername']))
            resourcePath = resourcePath.replace('{' + 'apiUsername' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SingleInternalUserResponse')
        return responseObject
        
        
    def getInternalUser(self, apiUsername, internalUsername, **kwargs):
        """Find api user profile by their api username

        Args:
            apiUsername, str: The username of a valid api user (required)
            internalUsername, str: The username of a valid internal user (required)
            
        Returns: SingleInternalUserResponse
        """

        allParams = ['apiUsername', 'internalUsername']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getInternalUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/profiles/2.0/{apiUsername}/users/{internalUsername}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('apiUsername' in params):
            replacement = str(self.apiClient.toPathValue(params['apiUsername']))
            resourcePath = resourcePath.replace('{' + 'apiUsername' + '}',
                                                replacement)
        if ('internalUsername' in params):
            replacement = str(self.apiClient.toPathValue(params['internalUsername']))
            resourcePath = resourcePath.replace('{' + 'internalUsername' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SingleInternalUserResponse')
        return responseObject
        
        
    def deleteInternalUser(self, apiUsername, internalUsername, **kwargs):
        """Delete all internal users created by the authenticated user.

        Args:
            apiUsername, str: The username of a valid api user (required)
            internalUsername, str: The username of a valid internal user (required)
            
        Returns: SingleInternalUserResponse
        """

        allParams = ['apiUsername', 'internalUsername']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteInternalUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/profiles/2.0/{apiUsername}/users/{internalUsername}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('apiUsername' in params):
            replacement = str(self.apiClient.toPathValue(params['apiUsername']))
            resourcePath = resourcePath.replace('{' + 'apiUsername' + '}',
                                                replacement)
        if ('internalUsername' in params):
            replacement = str(self.apiClient.toPathValue(params['internalUsername']))
            resourcePath = resourcePath.replace('{' + 'internalUsername' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SingleInternalUserResponse')
        return responseObject
        
        
    def updateInternalUser(self, apiUsername, internalUsername, username, email, **kwargs):
        """Create or update the given internal user.

        Args:
            apiUsername, str: The username of a valid api user (required)
            internalUsername, str: The username of a valid internal user (required)
            username, str: The internal user's username. This must be unique among all internal users created by the authenticated api user. (required)
            email, str: The internal user's email address. This must be unique among all internal users created by the authenticated api user. (required)
            firstName, str: The internal user's first name. (optional)
            lastName, str: The internal user's last name. (optional)
            position, str: The internal user's position at their institution. (optional)
            institution, str: The internal user's institution. (optional)
            phone, str: The internal user's phone number in ###-###-#### format. (optional)
            fax, str: The internal user's phone number in ###-###-#### format. (optional)
            researchArea, str: The internal user's first name. (optional)
            department, str: The internal user's first name. (optional)
            city, str: The internal user's first name. (optional)
            state, str: The internal user's state. (optional)
            country, str: The internal user's country. (optional)
            gender, str: The internal user's gender. (optional)
            
        Returns: SingleInternalUserResponse
        """

        allParams = ['apiUsername', 'internalUsername', 'username', 'email', 'firstName', 'lastName', 'position', 'institution', 'phone', 'fax', 'researchArea', 'department', 'city', 'state', 'country', 'gender']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateInternalUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/profiles/2.0/{apiUsername}/users/{internalUsername}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('apiUsername' in params):
            replacement = str(self.apiClient.toPathValue(params['apiUsername']))
            resourcePath = resourcePath.replace('{' + 'apiUsername' + '}',
                                                replacement)
        if ('internalUsername' in params):
            replacement = str(self.apiClient.toPathValue(params['internalUsername']))
            resourcePath = resourcePath.replace('{' + 'internalUsername' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SingleInternalUserResponse')
        return responseObject
        
        
    def searchInternalUsers(self, username, term, value, **kwargs):
        """Search for internal user profiles by search terms

        Args:
            username, str: The username of a valid api user (required)
            term, str: The profile attribute by which to search. Status may be either active or deleted. (required)
            value, str: The search value. Partial matches will be returned. (required)
            
        Returns: MultipleProfileResponse
        """

        allParams = ['username', 'term', 'value']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method searchInternalUsers" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/profiles/2.0/{username}/users/search/{term}/{value}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('username' in params):
            replacement = str(self.apiClient.toPathValue(params['username']))
            resourcePath = resourcePath.replace('{' + 'username' + '}',
                                                replacement)
        if ('term' in params):
            replacement = str(self.apiClient.toPathValue(params['term']))
            resourcePath = resourcePath.replace('{' + 'term' + '}',
                                                replacement)
        if ('value' in params):
            replacement = str(self.apiClient.toPathValue(params['value']))
            resourcePath = resourcePath.replace('{' + 'value' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MultipleProfileResponse')
        return responseObject
        
        
    


