#!/usr/bin/env python
"""
WordAPI.py
Copyright 2012 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from models import *


class NotificationsApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    def add(self, event, url, **kwargs):
        """Update or Add new notification.

        Args:
            event, str: The event that triggers this notification (required)
            url, str: The url or email address to send the notification (required)
            associatedUuid, str: UUIDs of resource to which the above event will occur. (optional)
            persistent, bool: Whether this notification should stay active after it fires the first time. (optional)
            
        Returns: NotificationResponse
        """

        allParams = ['event', 'url', 'associatedUuid', 'persistent']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method add" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/notifications/2.0/'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'NotificationResponse')
        return responseObject
        
        
    def list(self, associatedUuid, **kwargs):
        """Retrieve notification for a specific resource.

        Args:
            associatedUuid, str: The uuid of the associated resource. All notifications for this resource visible to the user will be returned. (required)
            
        Returns: MultipleNotificationResponse
        """

        allParams = ['associatedUuid']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method list" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/notifications/2.0/'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('associatedUuid' in params):
            queryParams['associatedUuid'] = self.apiClient.toPathValue(params['associatedUuid'])
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MultipleNotificationResponse')
        return responseObject
        
        
    def get(self, uuid, **kwargs):
        """Retrieve notification.

        Args:
            uuid, str: The uuid of the notification item (required)
            
        Returns: NotificationResponse
        """

        allParams = ['uuid']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method get" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/notifications/2.0/{uuid}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'NotificationResponse')
        return responseObject
        
        
    def update(self, uuid, event, url, **kwargs):
        """Update or Add new notification.

        Args:
            uuid, str: The uuid of the notification item (required)
            event, str: The event that triggers this notification (required)
            url, str: The url or email address to send the notification (required)
            associatedUuid, str: UUIDs of resource to which the above event will occur. (optional)
            persistent, bool: Whether this notification should stay active after it fires the first time. (optional)
            
        Returns: NotificationResponse
        """

        allParams = ['uuid', 'event', 'url', 'associatedUuid', 'persistent']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method update" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/notifications/2.0/{uuid}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'NotificationResponse')
        return responseObject
        
        
    def delete(self, uuid, **kwargs):
        """Remove notification from the system.

        Args:
            uuid, str: The uuid of the notification item (required)
            
        Returns: EmptyNotificationResponse
        """

        allParams = ['uuid']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method delete" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/notifications/2.0/{uuid}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptyNotificationResponse')
        return responseObject
        
        
    


