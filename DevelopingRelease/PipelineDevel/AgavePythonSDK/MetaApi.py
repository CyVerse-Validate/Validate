#!/usr/bin/env python
"""
WordAPI.py
Copyright 2012 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from models import *


class MetaApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    def listMetadata(self, q, **kwargs):
        """List and/or search metadata.

        Args:
            q, str: The query to perform. Traditional MongoDB queries are supported (required)
            
        Returns: MultipleMetadataResponse
        """

        allParams = ['q']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listMetadata" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/data'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('q' in params):
            queryParams['q'] = self.apiClient.toPathValue(params['q'])
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MultipleMetadataResponse')
        return responseObject
        
        
    def addMetadata(self, name, value, **kwargs):
        """Update or Add new Metadata.

        Args:
            name, str: The name of the metadata (required)
            value, str: The value of the metadata, supplied in JSON or as a String (required)
            associationIds, str: UUIDs of associated agave entities, including the entities to which this metadata belongs (optional)
            schemaId, str: The UUID of a JSON schema against which to validate the supplied value. If none is supplied, no JSON validation is performed (optional)
            
        Returns: MetadataResponse
        """

        allParams = ['name', 'value', 'associationIds', 'schemaId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method addMetadata" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/data'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MetadataResponse')
        return responseObject
        
        
    def getMetadata(self, uuid, **kwargs):
        """Retrieve Metadata.

        Args:
            uuid, str: The uuid of the metadata item (required)
            
        Returns: MetadataResponse
        """

        allParams = ['uuid']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getMetadata" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/data/{uuid}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MetadataResponse')
        return responseObject
        
        
    def updateMetadata(self, uuid, name, value, **kwargs):
        """Update or Add new Metadata.

        Args:
            uuid, str: The uuid of the metadata item (required)
            name, str: The name of the metadata (required)
            value, str: The value of the metadata, supplied in JSON or as a String (required)
            associationIds, str: UUIDs of associated agave entities, including the entities to which this metadata belongs (optional)
            schemaId, str: The UUID of a JSON schema against which to validate the supplied value. If none is supplied, no JSON validation is performed (optional)
            
        Returns: MetadataResponse
        """

        allParams = ['uuid', 'name', 'value', 'associationIds', 'schemaId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateMetadata" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/data/{uuid}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MetadataResponse')
        return responseObject
        
        
    def deleteMetadata(self, uuid, **kwargs):
        """Remove Metadata from the system.

        Args:
            uuid, str: The uuid of the metadata item (required)
            
        Returns: EmptyMetadataResponse
        """

        allParams = ['uuid']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteMetadata" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/data/{uuid}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptyMetadataResponse')
        return responseObject
        
        
    def searchSchema(self, uuid, **kwargs):
        """Retrieve Metadata Schemata.

        Args:
            uuid, str: The uuid of the metadata schema item (required)
            
        Returns: MetadataSchemaResponse
        """

        allParams = ['uuid']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method searchSchema" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/schemas'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MetadataSchemaResponse')
        return responseObject
        
        
    def addSchema(self, schema, **kwargs):
        """Add a new Metadata Schema.

        Args:
            schema, str: A valid JSON Schema document (required)
            
        Returns: MetadataSchemaResponse
        """

        allParams = ['schema']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method addSchema" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/schemas'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MetadataSchemaResponse')
        return responseObject
        
        
    def getSchema(self, uuid, **kwargs):
        """Retrieve Metadata Schemata.

        Args:
            uuid, str: The uuid of the metadata schema item (required)
            
        Returns: MetadataSchemaResponse
        """

        allParams = ['uuid']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getSchema" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/schemas/{uuid}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MetadataSchemaResponse')
        return responseObject
        
        
    def updateSchema(self, uuid, schema, **kwargs):
        """Update or Add a new Metadata Schema.

        Args:
            uuid, str: The uuid of the metadata schema item (required)
            schema, str: A JSON Schema (required)
            
        Returns: MetadataSchemaResponse
        """

        allParams = ['uuid', 'schema']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateSchema" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/schemas/{uuid}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MetadataSchemaResponse')
        return responseObject
        
        
    def deleteSchema(self, uuid, **kwargs):
        """Remove Metadata Schema from the system.

        Args:
            uuid, str: The uuid of the metadata schema item (required)
            
        Returns: EmptyMetadataResponse
        """

        allParams = ['uuid']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteSchema" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/schemas/{uuid}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptyMetadataResponse')
        return responseObject
        
        
    def listMetadataPermissions(self, uuid, **kwargs):
        """Get the permission ACL for this metadata.

        Args:
            uuid, str: The uuid of the metadata item (required)
            
        Returns: MultipleMetadataPermissionResponse
        """

        allParams = ['uuid']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listMetadataPermissions" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/data/{uuid}/pems'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MultipleMetadataPermissionResponse')
        return responseObject
        
        
    def updateMetadataPermissions(self, uuid, username, permission, **kwargs):
        """Add or update a user's permission for the given metadata.

        Args:
            uuid, str: The uuid of the metadata item (required)
            username, str: The username of the api user whose permission is to be set. (required)
            permission, str: The permission to set (required)
            
        Returns: MetadataPermissionResponse
        """

        allParams = ['uuid', 'username', 'permission']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateMetadataPermissions" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/data/{uuid}/pems'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MetadataPermissionResponse')
        return responseObject
        
        
    def deleteMetadataPermission(self, uuid, **kwargs):
        """Deletes all permissions on the given metadata.

        Args:
            uuid, str: The uuid of the metadata item (required)
            
        Returns: EmptyMetadataResponse
        """

        allParams = ['uuid']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteMetadataPermission" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/data/{uuid}/pems'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptyMetadataResponse')
        return responseObject
        
        
    def listMetadataPermissionsForUser(self, uuid, username, **kwargs):
        """Get the permission ACL for this metadata.

        Args:
            uuid, str: The uuid of the metadata item (required)
            username, str: The username of the permission owner (required)
            
        Returns: MetadataPermissionResponse
        """

        allParams = ['uuid', 'username']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listMetadataPermissionsForUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/data/{uuid}/pems/{username}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        if ('username' in params):
            replacement = str(self.apiClient.toPathValue(params['username']))
            resourcePath = resourcePath.replace('{' + 'username' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MetadataPermissionResponse')
        return responseObject
        
        
    def updateMetadataPermissionsForUser(self, uuid, username, permission, **kwargs):
        """Add or update a user's permission for the given metadata.

        Args:
            uuid, str: The uuid of the metadata item (required)
            username, str: The username of the permission owner (required)
            permission, str: The permission to set (required)
            
        Returns: MetadataPermissionResponse
        """

        allParams = ['uuid', 'username', 'permission']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateMetadataPermissionsForUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/data/{uuid}/pems/{username}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        if ('username' in params):
            replacement = str(self.apiClient.toPathValue(params['username']))
            resourcePath = resourcePath.replace('{' + 'username' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MetadataPermissionResponse')
        return responseObject
        
        
    def deleteMetadataPermissionsForUser(self, uuid, username, **kwargs):
        """Deletes all permissions on the given metadata.

        Args:
            uuid, str: The uuid of the metadata item (required)
            username, str: The username of the permission owner (required)
            
        Returns: EmptyMetadataResponse
        """

        allParams = ['uuid', 'username']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteMetadataPermissionsForUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/data/{uuid}/pems/{username}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        if ('username' in params):
            replacement = str(self.apiClient.toPathValue(params['username']))
            resourcePath = resourcePath.replace('{' + 'username' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptyMetadataResponse')
        return responseObject
        
        
    def listSchemaPermissions(self, uuid, **kwargs):
        """Get the permission ACL for this schema.

        Args:
            uuid, str: The uuid of the metadata schema item (required)
            
        Returns: MultipleMetadataSchemaPermissionResponse
        """

        allParams = ['uuid']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listSchemaPermissions" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/schemas/{uuid}/pems'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MultipleMetadataSchemaPermissionResponse')
        return responseObject
        
        
    def updateSchemaPermissions(self, uuid, username, permission, **kwargs):
        """Add or update a user's permission for the given schema.

        Args:
            uuid, str: The uuid of the metadata schema item (required)
            username, str: The username of the api user whose permission is to be set. (required)
            permission, str: The permission to set (required)
            
        Returns: MetadataSchemaPermissionResponse
        """

        allParams = ['uuid', 'username', 'permission']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateSchemaPermissions" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/schemas/{uuid}/pems'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MetadataSchemaPermissionResponse')
        return responseObject
        
        
    def deleteSchemaPermissions(self, uuid, **kwargs):
        """Deletes all permissions on the given schema.

        Args:
            uuid, str: The uuid of the metadata schema item (required)
            
        Returns: EmptyMetadataResponse
        """

        allParams = ['uuid']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteSchemaPermissions" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/schemas/{uuid}/pems'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptyMetadataResponse')
        return responseObject
        
        
    def listSchemaPermissionsForUser(self, uuid, username, **kwargs):
        """Get the permission ACL for this schema.

        Args:
            uuid, str: The uuid of the metadata schema item (required)
            username, str: The username of the permission owner (required)
            
        Returns: MetadataSchemaPermissionResponse
        """

        allParams = ['uuid', 'username']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listSchemaPermissionsForUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/schemas/{uuid}/pems/{username}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        if ('username' in params):
            replacement = str(self.apiClient.toPathValue(params['username']))
            resourcePath = resourcePath.replace('{' + 'username' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MetadataSchemaPermissionResponse')
        return responseObject
        
        
    def updateSchemaPermissionsForUser(self, uuid, username, permission, **kwargs):
        """Add or update a user's permission for the given metadata schema.

        Args:
            uuid, str: The uuid of the metadata schema item (required)
            username, str: The username of the permission owner (required)
            permission, str: The permission to set (required)
            
        Returns: MetadataSchemaPermissionResponse
        """

        allParams = ['uuid', 'username', 'permission']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateSchemaPermissionsForUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/schemas/{uuid}/pems/{username}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        if ('username' in params):
            replacement = str(self.apiClient.toPathValue(params['username']))
            resourcePath = resourcePath.replace('{' + 'username' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MetadataSchemaPermissionResponse')
        return responseObject
        
        
    def deleteSchemaPermissionsForUser(self, uuid, username, **kwargs):
        """Deletes all permissions on the given metadata.

        Args:
            uuid, str: The uuid of the metadata schema item (required)
            username, str: The username of the permission owner (required)
            
        Returns: EmptyMetadataResponse
        """

        allParams = ['uuid', 'username']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteSchemaPermissionsForUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/meta/2.0/schemas/{uuid}/pems/{username}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('uuid' in params):
            replacement = str(self.apiClient.toPathValue(params['uuid']))
            resourcePath = resourcePath.replace('{' + 'uuid' + '}',
                                                replacement)
        if ('username' in params):
            replacement = str(self.apiClient.toPathValue(params['username']))
            resourcePath = resourcePath.replace('{' + 'username' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptyMetadataResponse')
        return responseObject
        
        
    


