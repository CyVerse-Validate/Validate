#!/usr/bin/env python
"""
WordAPI.py
Copyright 2012 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from models import *


class AppsApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    def list(self, **kwargs):
        """Get a list of available applications.

        Args:
            
        Returns: MultipleApplicationResponse
        """

        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method list" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apps/2.0/'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MultipleApplicationResponse')
        return responseObject
        
        
    def add(self, body, **kwargs):
        """Register and update new applications.

        Args:
            body, str: The description of the app to add or update. This can be either a file upload or json posted to the request body. (required)
            
        Returns: SingleApplicationResponse
        """

        allParams = ['body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method add" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apps/2.0/'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SingleApplicationResponse')
        return responseObject
        
        
    def get(self, appId, **kwargs):
        """Get details of an application by it's unique id.

        Args:
            appId, str: The id of the application. The application id is made up of the name and version separated by a dash. (required)
            
        Returns: SingleApplicationResponse
        """

        allParams = ['appId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method get" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apps/2.0/{appId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('appId' in params):
            replacement = str(self.apiClient.toPathValue(params['appId']))
            resourcePath = resourcePath.replace('{' + 'appId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SingleApplicationResponse')
        return responseObject
        
        
    def update(self, appId, body, **kwargs):
        """Update an application.

        Args:
            appId, str: The id of the application. The application id is made up of the name and version separated by a dash. (required)
            body, str: The description of the app to add or update. This can be either a file upload or json posted to the request body. (required)
            
        Returns: SingleApplicationResponse
        """

        allParams = ['appId', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method update" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apps/2.0/{appId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('appId' in params):
            replacement = str(self.apiClient.toPathValue(params['appId']))
            resourcePath = resourcePath.replace('{' + 'appId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SingleApplicationResponse')
        return responseObject
        
        
    def manage(self, appId, action, name, version, **kwargs):
        """Edit an application.

        Args:
            appId, str: The id of the application. The application id is made up of the name and version separated by a dash. (required)
            action, str: The action to perform on this application. (required)
            name, str: The name of the cloned app. Defaults to the previous name with -$username appended.. (required)
            version, str: The version of the cloned public app. Defaults to the original version. (required)
            system, str: The system id of the execution system on which to run the cloned app. Defaults to the original execution system. (optional)
            
        Returns: SingleApplicationResponse
        """

        allParams = ['appId', 'action', 'name', 'version', 'system']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method manage" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apps/2.0/{appId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}

        if ('appId' in params):
            replacement = str(self.apiClient.toPathValue(params['appId']))
            resourcePath = resourcePath.replace('{' + 'appId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'SingleApplicationResponse')
        return responseObject
        
        
    def delete(self, appId, **kwargs):
        """Deletes an application.

        Args:
            appId, str: The id of the application. The application id is made up of the name and version separated by a dash. (required)
            
        Returns: EmptyApplicationResponse
        """

        allParams = ['appId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method delete" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apps/2.0/{appId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('appId' in params):
            replacement = str(self.apiClient.toPathValue(params['appId']))
            resourcePath = resourcePath.replace('{' + 'appId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptyApplicationResponse')
        return responseObject
        
        
    def listPermissions(self, appId, **kwargs):
        """Get the permission ACL for this application.

        Args:
            appId, str: The id of the application. The application id is made up of the name and version separated by a dash. (required)
            
        Returns: ApplicationPermissionResponse
        """

        allParams = ['appId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listPermissions" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apps/2.0/{appId}/pems'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('appId' in params):
            replacement = str(self.apiClient.toPathValue(params['appId']))
            resourcePath = resourcePath.replace('{' + 'appId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ApplicationPermissionResponse')
        return responseObject
        
        
    def updateApplicationPermissions(self, appId, username, permission, **kwargs):
        """Add or update a user's permission for an application.

        Args:
            appId, str: The id of the application. The application id is made up of the name and version separated by a dash. (required)
            username, str: The username of the api user associated with the permission (required)
            permission, str: The permission to set (required)
            
        Returns: EmptyApplicationResponse
        """

        allParams = ['appId', 'username', 'permission']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateApplicationPermissions" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apps/2.0/{appId}/pems'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('appId' in params):
            replacement = str(self.apiClient.toPathValue(params['appId']))
            resourcePath = resourcePath.replace('{' + 'appId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptyApplicationResponse')
        return responseObject
        
        
    def deletePermissions(self, appId, **kwargs):
        """Deletes all permissions on an application.

        Args:
            appId, str: The id of the application. The application id is made up of the name and version separated by a dash. (required)
            
        Returns: EmptyApplicationResponse
        """

        allParams = ['appId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deletePermissions" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apps/2.0/{appId}/pems'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('appId' in params):
            replacement = str(self.apiClient.toPathValue(params['appId']))
            resourcePath = resourcePath.replace('{' + 'appId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptyApplicationResponse')
        return responseObject
        
        
    def listPermissionsForUser(self, appId, username, **kwargs):
        """Get a specific user's permissions for an application.

        Args:
            appId, str: The id of the application. The application id is made up of the name and version separated by a dash. (required)
            username, str: The username of the api user associated with the permission. (required)
            
        Returns: ApplicationPermissionResponse
        """

        allParams = ['appId', 'username']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listPermissionsForUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apps/2.0/{appId}/pems/{username}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('appId' in params):
            replacement = str(self.apiClient.toPathValue(params['appId']))
            resourcePath = resourcePath.replace('{' + 'appId' + '}',
                                                replacement)
        if ('username' in params):
            replacement = str(self.apiClient.toPathValue(params['username']))
            resourcePath = resourcePath.replace('{' + 'username' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ApplicationPermissionResponse')
        return responseObject
        
        
    def updatePermissionsForUser(self, appId, username, permission, **kwargs):
        """Add or update a user's permission for an application.

        Args:
            appId, str: The id of the application. The application id is made up of the name and version separated by a dash. (required)
            username, str: The username of the api user associated with the permission (required)
            permission, str: The permission to set (required)
            
        Returns: EmptyApplicationResponse
        """

        allParams = ['appId', 'username', 'permission']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updatePermissionsForUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apps/2.0/{appId}/pems/{username}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('appId' in params):
            replacement = str(self.apiClient.toPathValue(params['appId']))
            resourcePath = resourcePath.replace('{' + 'appId' + '}',
                                                replacement)
        if ('username' in params):
            replacement = str(self.apiClient.toPathValue(params['username']))
            resourcePath = resourcePath.replace('{' + 'username' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptyApplicationResponse')
        return responseObject
        
        
    def deletePermissionsForUser(self, appId, username, **kwargs):
        """Deletes all permissions for the given user on an application.

        Args:
            appId, str: The id of the application. The application id is made up of the name and version separated by a dash. (required)
            username, str: The username of the api user associated with the permission (required)
            
        Returns: EmptyApplicationResponse
        """

        allParams = ['appId', 'username']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deletePermissionsForUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apps/2.0/{appId}/pems/{username}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        if ('appId' in params):
            replacement = str(self.apiClient.toPathValue(params['appId']))
            resourcePath = resourcePath.replace('{' + 'appId' + '}',
                                                replacement)
        if ('username' in params):
            replacement = str(self.apiClient.toPathValue(params['username']))
            resourcePath = resourcePath.replace('{' + 'username' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'EmptyApplicationResponse')
        return responseObject
        
        
    def listByName(self, name, **kwargs):
        """Get a list of applications with the given name.

        Args:
            name, str: The name of the application. This should not include the version number. (required)
            
        Returns: MultipleApplicationResponse
        """

        allParams = ['name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listByName" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apps/2.0/name/{name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('name' in params):
            replacement = str(self.apiClient.toPathValue(params['name']))
            resourcePath = resourcePath.replace('{' + 'name' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MultipleApplicationResponse')
        return responseObject
        
        
    def listByTag(self, tag, **kwargs):
        """Get a list of applications with the given tag.

        Args:
            tag, str: The tag of the application. (required)
            
        Returns: MultipleApplicationResponse
        """

        allParams = ['tag']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listByTag" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apps/2.0/tag/{tag}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('tag' in params):
            replacement = str(self.apiClient.toPathValue(params['tag']))
            resourcePath = resourcePath.replace('{' + 'tag' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MultipleApplicationResponse')
        return responseObject
        
        
    def listByOntologyTerm(self, term, **kwargs):
        """Get a list of applications with the given ontological term.

        Args:
            term, str: The tag of the ontological term. (required)
            
        Returns: MultipleApplicationResponse
        """

        allParams = ['term']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listByOntologyTerm" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apps/2.0/ontology/{term}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('term' in params):
            replacement = str(self.apiClient.toPathValue(params['term']))
            resourcePath = resourcePath.replace('{' + 'term' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MultipleApplicationResponse')
        return responseObject
        
        
    def getJobSubmissionForm(self, **kwargs):
        """Get a submission form for the named application.

        Args:
            
        Returns: ApplicationFormResponse
        """

        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getJobSubmissionForm" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apps/2.0/{uniqueName}/form'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ApplicationFormResponse')
        return responseObject
        
        
    def listBySystemId(self, systemId, **kwargs):
        """Get a list of applications with the given systemId as their executionHost.

        Args:
            systemId, str: The system in question (required)
            
        Returns: MultipleApplicationResponse
        """

        allParams = ['systemId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method listBySystemId" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apps/2.0/system/{systemId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('systemId' in params):
            replacement = str(self.apiClient.toPathValue(params['systemId']))
            resourcePath = resourcePath.replace('{' + 'systemId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'MultipleApplicationResponse')
        return responseObject
        
        
    


